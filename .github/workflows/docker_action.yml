# docker_action.yml
name: docker-ubuntu-build

on:
  push:
    branches:
      - '*/**'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'releases/**'
      - 'release/**'
      - 'release'

# only allow one copy of this workflow to run at a time (the group specified by workflow name and branch)
# cancel current workflows if they are running (unless on main or releases, so that we just run the latest queue'd.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: ${{ !contains(github.head_ref || github.ref_name, 'release/') || !contains(github.head_ref || github.ref_name, 'main/') }}

env:
  REGISTRY: ghcr.io  
  IMAGE_NAME: ${{ github.repository }}  # github.repository as <account>/<repo>
  DO_SIGNING: ${{ false }}
  BRANCH: ${{ github.head_ref || github.ref_name }}   # 'main' or 'develop'
  PYTEST: python -m pytest --cache-clear -vvv --color=yes --disable-warnings

jobs:
  # cleanup-job:
  #   runs-on:
  #     group: Default
  #   container:
  #     image: ghcr.io/catthehacker/ubuntu:act-22.04
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: 'Cleanup build folder'
  #       run: |
  #         ls -la ./
  #         rm -rf ./* || true
  #         rm -rf ./.??* || true
  #         ls -la ./

  cleanup-job-docker-runners:
    runs-on:
      group: docker-runners
    container:
      image: ghcr.io/catthehacker/ubuntu:act-22.04
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

  build-docker:      
    needs: cleanup-job-docker-runners
    if: always()
    name: docker_image_build
    runs-on:
      group: docker-runners
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - CUDA_VERSION: "torch_cuda_12_8"
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"

      # The repo gets volume mapped into the container automatically in test-docker
      - name: Checkout whole repo
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: List files in the repository
        run: |
          ls -lhXR ${{ github.workspace }}

      - name: Set file permissions in the repository
        run: |
          chmod -R 777 ${{ github.workspace }}
          ls -lhXR ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    # aka ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}_ubuntu
            org.opencontainers.image.vendor=Advanced Bioimaging Center at UC Berkeley and Janelia Research Campus
          tags: |
            type=schedule
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=branch
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=tag
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=pr

      - name: Build Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BRANCH_NAME=${{ env.BRANCH }}
          no-cache-filters: |
            pip_install
# cache the nvidia image and setup.  Then don't cache the "pip_install" build stage where we pip install the requirements.txt
          target: ${{ matrix.CUDA_VERSION }}


  push-docker:
    needs: build-docker
    name: docker_image_push
    runs-on:
      group: docker-runners
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - CUDA_VERSION: "torch_cuda_12_8"
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"

      # The repo gets volume mapped into the container automatically in test-docker
      - name: Checkout whole repo
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: List files in the repository
        run: |
          ls -lhXR ${{ github.workspace }}

      - name: Set file permissions in the repository
        run: |
          chmod -R 777 ${{ github.workspace }}
          ls -lhXR ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    # aka ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}_ubuntu
            org.opencontainers.image.vendor=Advanced Bioimaging Center at UC Berkeley and Janelia Research Campus
          tags: |
            type=schedule
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=branch
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=tag
            type=ref,suffix=_${{ matrix.CUDA_VERSION }},event=pr

      - name: Push Docker image
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BRANCH_NAME=${{ env.BRANCH }}
          target: ${{ matrix.CUDA_VERSION }}

  build-and-test-apptainer:
    runs-on:
      group: Default
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - CUDA_VERSION: "torch_cuda_12_8"
            test_framework: "pytorch"
      fail-fast: false  # do the other tests in the matrix even if one of them fails
    env:
      APPTAINER_RUN: apptainer exec --nv ${{ github.workspace }}/${{ github.head_ref || github.ref_name }}_${{ matrix.CUDA_VERSION }}.sif

    steps:
      # The repo gets volume mapped into the container automatically
      - name: Checkout whole repo
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: List files in the directory
        run: |
            ls -lhXR

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    # aka ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get bootstrap pytorch .sif from 'Apptainer' (e.g. 25.01-py3)
        id: bootstrap_sif
        run: |
            {
              echo 'SIF_FILE<<EOF'
              sed -n 's/From: //p' apptainerfile.def
              echo EOF
            } >> "$GITHUB_ENV"            
            echo "output will be  "
            echo $GITHUB_OUTPUT

      - name: Get bootstrap pytorch version from 'Apptainer' (e.g. 25.01-py3)
        id: sif_pytorch_version
        run: |
            echo "SIF_PYTORCH_VERSION=$(sed -n 's/From: pytorch_//p' apptainerfile.def)\n" >> $GITHUB_OUTPUT
            echo $GITHUB_OUTPUT

      - name: Get dockerfile pytorch version from 'Dockerfile' (e.g. 25.01-py3)
        id: dockerfile_pytorch_version
        run: |
            echo "DOCKER_PYTORCH_VERSION=$(grep -Po 'pytorch:\K.*(?= as)' Dockerfile)\n" >> $GITHUB_OUTPUT
            echo $GITHUB_OUTPUT

      - name: Raise error if dockerfile and apptainerfile.def disagree on pytorch version
        if: ${{ ! startsWith( steps.sif_pytorch_version.outputs.SIF_PYTORCH_VERSION, steps.dockerfile_pytorch_version.outputs.DOCKER_PYTORCH_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('dockerfile and apptainer.def recipe do not have the same pytorch version! ')

      - name: Get dockerfile pytorch image from 'Dockerfile' (e.g. nvcr.io/nvidia/pytorch:25.01-py3)
        id: dockerfile_pytorch_image
        run: |
            echo "DOCKER_PYTORCH_IMAGE=$(grep -Po 'FROM \K.*(?= as)' Dockerfile)\n" >> $GITHUB_OUTPUT
            echo $GITHUB_OUTPUT

      - name: Check if bootstrap SIF file exists
        id: check_if_bootstrap_SIF_exists
        uses: andstor/file-existence-action@v3
        with:
          files: "~/SIF_files/${{ steps.bootstrap_sif.outputs.SIF_FILE }}"

      - name: If apptainer bootstrap doesn't exist, build it.
        if: steps.check_if_bootstrap_SIF_exists.outputs.files_exists == 'false'
        # Only runs if all of the files exists
        run: |
            mkdir -p ~/SIF_files/
            apptainer build --nv --force ~/SIF_files/${{ steps.bootstrap_sif }} docker://${{ steps.dockerfile_pytorch_image.outputs.DOCKER_PYTORCH_IMAGE }}

      - name: Build Apptainer from apptainer.def definition file
        run: |
            apptainer remote login --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} oras://ghcr.io
            apptainer pull ${{ matrix.CUDA_VERSION }}.sif oras://ghcr.io/${{ github.repository_owner}}/SIF_files/
            apptainer build --nv --force ${{ github.workspace }}/${{ github.head_ref || github.ref_name }}_${{ matrix.CUDA_VERSION }}.sif apptainerfile.def

      # - name: Login and Push Apptainer SIF to github
      #   run: |
      #       ls *.si*
      #       apptainer remote login --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} oras://ghcr.io
      #       apptainer push -U ${{ github.workspace }}/${{ github.head_ref || github.ref_name }}_${{ matrix.CUDA_VERSION }}.sif oras://ghcr.io/${{ github.repository }}:${{ github.head_ref || github.ref_name }}_${{ matrix.CUDA_VERSION }}_sif

      - name: List files in the repository
        run: |
          ls -lhXR ${{ github.workspace }}

      - name: Set file permissions in the repository
        run: |
          chmod -R 777 ${{ github.workspace }}
          ls -lhXR ${{ github.workspace }}

      - name: Investigate file ownership
        run: |
          pwd
          id
          id -u
          ls -lhXR
          
      - name: pip list 
        run: ${{ env.APPTAINER_RUN }} pip list

      - name: Test NVIDIA-SMI
        run:  ${{ env.APPTAINER_RUN }} nvidia-smi

      # - name: Test ${{ matrix.test_framework }}
      #   run: ${{ env.APPTAINER_RUN }} ${{ env.PYTEST }} ${{ github.workspace }}/tests/test_${{ matrix.test_framework }}.py
